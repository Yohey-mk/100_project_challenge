# cli.py

### === imports ===
import os
import sys
import json

### === Helper functions ===

#Create New Notes
def create_new_note(user_note,user_notebook):
    user_notebook.append(user_note)
    print(f"Added: {user_note}\n")

#Show all notes
def show_all_notes(user_notebook):
    if not user_notebook:
        print("No notes found.\n")
    else:
        for i, note in enumerate(user_notebook, start=1):
            print(f"{i}: {note}")
        print("")

#Update Notes *include open/modify
def update_notes(user_notebook):
    if not user_notebook: #„Åæ„Åö„ÅØuser_notebook„ÅåÁ©∫„Åß„Å™„ÅÑ„Åãcheck
        print("No notes to update.\n")
        return

    show_all_notes(user_notebook)
    user_pick = input("Pick which one to update(or enter q to go back): ")

    if user_pick.lower() == "q":
        return
    
    try:
        update_number = int(user_pick) - 1
        if 0 <= update_number < len(user_notebook):
            current_note = user_notebook[update_number]
            print(f"Current note: {current_note}\n-----------")
            user_notebook[update_number] = input("Enter new note: ")
            print("Note updated!\n")
        else:
            print("Invalid note number.\n")
    except ValueError:
        print("If you made a typo, try again.")

#Delete Notes
def delete_notes(user_notebook):
    if not user_notebook:
        print("No notes to delete.")
        return
    try:
        show_all_notes(user_notebook)
        user_pick = input("Which one to delete? (enter 'q' to go back): ")

        if user_pick.lower() == "q":
            print("Cancelled.\n")

        elif user_pick.isdigit():
            number_to_delete = int(user_pick) - 1
            if 0 <= number_to_delete < len(user_notebook):
                note_to_delete = user_notebook[number_to_delete]
                print(f"You chose: {note_to_delete}")
                make_sure = input("Are you sure to delete? (y/n): ").lower()
                if make_sure == "y":
                    remove_note = user_notebook.pop(number_to_delete)
                    print(f"Successfully removed {remove_note}.\n")
                else:
                    print("Return to home.\n")
            else:
                print("Invalid input.\n")

    except (ValueError, IndexError):
        print("Invalid input. Please choose a valid number from the list.")
        return

#Save notebook
def resource_path(filename):
    if hasattr(sys, "_MEIPASS"):
        return os.path.join(sys.MEIPASS, filename)
    return os.path.join(os.path.abspath("."), filename)

def save_notebook(user_notebook, filename="day14_notebook.json"):
    path = resource_path(filename)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(user_notebook, f, ensure_ascii=False, indent=2)

def load_notebook(filename="day14_notebook.json"):
    path = resource_path(filename)
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

#Close app
def close_app():
    exit()

### === App Logics ===
def main():
    user_notebook = load_notebook()

    while True:
        user_input = input("Choose your option:\n1. Create a new note\n2. Show all notes\n3. Update notes\n4. Delete notes\n5. Close app\nEnter your option: ")
        if user_input == "1":
            user_note = input("Enter your note: ")
            create_new_note(user_note,user_notebook)
            save_notebook(user_notebook)
        elif user_input == "2":
            show_all_notes(user_notebook)
        elif user_input == "3":
            update_notes(user_notebook)
            save_notebook(user_notebook)
        elif user_input == "4":
            delete_notes(user_notebook)
            save_notebook(user_notebook)
        elif user_input == "5":
            save_notebook(user_notebook)
            close_app()
        else:
            print("Invalid input. Enter 1 - 5.")


### === Run App ===
if __name__ == "__main__":
    main()


### === Notes ===
#‚úÖ ÂøÖÈ†àÊ©üËÉΩÔºàCLIÔºâ
#	‚Ä¢	„É¶„Éº„Ç∂„Éº„Åå„É°„É¢„ÇíÂÖ•Âäõ„Åó„Å¶‰øùÂ≠ò„Åß„Åç„Çã
#	‚Ä¢	Ë§áÊï∞„ÅÆ„É°„É¢„Çí„É™„Çπ„Éà„ÅßÁÆ°ÁêÜÔºà„É°„É¢„ÅÆ„Çø„Ç§„Éà„É´„Çí„É™„Çπ„ÉàË°®Á§∫Ôºâ
#	‚Ä¢	‰ªªÊÑè„ÅÆ„É°„É¢„ÇíË™≠„ÅøËæº„Åø„ÉªÁ∑®ÈõÜ„Åß„Åç„Çã
#	‚Ä¢	JSONÂΩ¢Âºè„Åß„Éá„Éº„Çø„Çí‰øùÂ≠ò„ÉªË™≠„ÅøËæº„ÅøÔºàDay13„ÅÆÂæ©ÁøíÔºâ

#CLI Interface„ÅÆ„Éí„É≥„Éà
#1. Êñ∞Ë¶è„É°„É¢„Çí‰ΩúÊàê
#2. Êó¢Â≠ò„É°„É¢„Çí‰∏ÄË¶ßË°®Á§∫
#3. „É°„É¢„ÇíÈñã„Åè„ÉªÁ∑®ÈõÜ„Åô„Çã
#4. „É°„É¢„ÇíÂâäÈô§„Åô„Çã
#5. ÁµÇ‰∫Ü

#üèÅ „Åæ„Å®„ÇÅÔºöÊ¨°„Å´ÈÄ≤„ÇÄÂâç„Å´„ÇÑ„Çã„Å®Èù¢ÁôΩ„ÅÑËøΩÂä†Ê©üËÉΩ
#	1.	„Éé„Éº„Éà„Çí„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò„ÉªË™≠„ÅøËæº„ÅøÔºàJSON„Åß„ÇÑ„Çã„Å®Â≠¶Áøí„Å´„ÇÇÊúÄÈÅ©Ôºâ
#	2.	„Éé„Éº„Éà„ÅÆÊõ¥Êñ∞Ê©üËÉΩÔºàuser_notebook[index] = new_noteÔºâ
#	3.	„Éé„Éº„Éà„ÅÆÂâäÈô§Ê©üËÉΩÔºàdel user_notebook[index]Ôºâ
#	4.	Ê§úÁ¥¢Ê©üËÉΩÔºàif keyword in note:Ôºâ
